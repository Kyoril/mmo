// Copyright (C) 2019 - 2022, Robin Klimonow. All rights reserved.

#include "material_compiler_metal.h"

namespace mmo
{
	void MaterialCompilerMetal::AddGlobalFunction(std::string_view name, std::string_view code)
	{
	}

	ExpressionIndex MaterialCompilerMetal::AddExpression(std::string_view code, ExpressionType type)
	{
		return IndexNone;
	}

	void MaterialCompilerMetal::NotifyTextureCoordinateIndex(uint32 textureCoordinateIndex)
	{
	}
	
	ExpressionIndex MaterialCompilerMetal::AddTextureCoordinate(int32 coordinateIndex)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddTextureSample(std::string_view texture, ExpressionIndex coordinates, bool srgb)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddMultiply(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddAddition(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddSubtract(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddLerp(ExpressionIndex first, ExpressionIndex second, ExpressionIndex alpha)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddDot(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddClamp(ExpressionIndex base, ExpressionIndex min, ExpressionIndex max)
	{
		return IndexNone;
	}
	
	ExpressionIndex MaterialCompilerMetal::AddOneMinus(ExpressionIndex input)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddPower(ExpressionIndex base, ExpressionIndex exponent)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddWorldPosition()
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddCameraVector()
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddMask(ExpressionIndex input, bool r, bool g, bool b, bool a)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddVertexNormal()
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddDivide(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddAbs(ExpressionIndex input)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddNormalize(ExpressionIndex input)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddVertexColor()
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddAppend(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerMetal::AddTransform(ExpressionIndex input, Space sourceSpace, Space targetSpace)
	{
		return IndexNone;
	}

	void MaterialCompilerMetal::GenerateVertexShaderCode(VertexShaderType type)
	{
		m_vertexShaderCode = "// This was generated by MaterialCompilerNull. It doesn't do anything.";
	}

	void MaterialCompilerMetal::GeneratePixelShaderCode()
	{
		m_pixelShaderCode = "// This was generated by MaterialCompilerNull. It doesn't do anything.";
	}

    ExpressionIndex MaterialCompilerMetal::AddTextureParameterSample(std::string_view name, std::string_view texture, ExpressionIndex coordinates, bool srgb)
    {
        return IndexNone;
    }

    ExpressionIndex MaterialCompilerMetal::AddScalarParameterExpression(std::string_view name, float defaultValue)
    {
        return IndexNone;
    }

    ExpressionIndex MaterialCompilerMetal::AddVectorParameterExpression(std::string_view name, const Vector4& defaultValue)
    {
        return IndexNone;
    }
}
