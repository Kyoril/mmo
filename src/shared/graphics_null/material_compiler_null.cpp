// Copyright (C) 2019 - 2022, Robin Klimonow. All rights reserved.

#include "material_compiler_null.h"

namespace mmo
{
	void MaterialCompilerNull::AddGlobalFunction(std::string_view name, std::string_view code)
	{
	}

	ExpressionIndex MaterialCompilerNull::AddExpression(std::string_view code)
	{
		return IndexNone;
	}

	void MaterialCompilerNull::NotifyTextureCoordinateIndex(uint32 textureCoordinateIndex)
	{
	}

	void MaterialCompilerNull::SetBaseColorExpression(ExpressionIndex expression)
	{
		
	}

	ExpressionIndex MaterialCompilerNull::AddTextureCoordinate(int32 coordinateIndex)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddTextureSample(std::string_view texture, ExpressionIndex coordinates)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddMultiply(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddAddition(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddLerp(ExpressionIndex first, ExpressionIndex second, ExpressionIndex alpha)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddDot(ExpressionIndex first, ExpressionIndex second)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddClamp(ExpressionIndex base, ExpressionIndex min, ExpressionIndex max)
	{
		return IndexNone;
	}
	
	ExpressionIndex MaterialCompilerNull::AddOneMinus(ExpressionIndex input)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddPower(ExpressionIndex base, ExpressionIndex exponent)
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddWorldPosition()
	{
		return IndexNone;
	}

	ExpressionIndex MaterialCompilerNull::AddMask(ExpressionIndex input, bool r, bool g, bool b, bool a)
	{
		return IndexNone;
	}

	void MaterialCompilerNull::GenerateVertexShaderCode()
	{
		m_vertexShaderCode = "// This was generated by MaterialCompilerNull. It doesn't do anything.";
	}

	void MaterialCompilerNull::GeneratePixelShaderCode()
	{
		m_pixelShaderCode = "// This was generated by MaterialCompilerNull. It doesn't do anything.";
	}
}
